const CodeMirror = require('codemirror')
const {
    remote
} = require('electron')
const path = require('path')

require('codemirror/mode/javascript/javascript')
require('codemirror/addon/edit/matchbrackets')

const opts = {
    tabSize: 2,
    lineNumbers: JSON.parse(window.localStorage.lineNumbers || 'false'),
    styleActiveLine: false,
    matchBrackets: true,
    theme: window.localStorage.theme || 'light'
}

document.body.setAttribute('data-theme', opts.theme.toLowerCase())

const editor = CodeMirror.fromTextArea(
    document.getElementById('editor'),
    Object.assign({}, opts, {
        autofocus: true,
        mode: 'javascript',
        gutters: ['CodeMirror-lint-markers'],
        lint: true
    })
)

const output = CodeMirror.fromTextArea(
    document.getElementById('output'),
    Object.assign({}, opts, {
        readOnly: true
    })
)

setTimeout(() => {
    editor.refresh()
    output.refresh()
}, 128)

let sandbox = new remote.BrowserWindow({
    width: 450,
    height: 400,
    minWidth: 150,
    minHeight: 200,
    title: 'Document Window',
    alwaysOnTop: JSON.parse(window.localStorage.sandboxOnTop || 'false')
})

sandbox.loadURL(`file://${__dirname}/../../../static/blank.html`)

sandbox.webContents.on('did-finish-load', () => {
    const str = window.localStorage.input || ''
    editor.setValue(str)
    render(str)
})

if (!window.localStorage.sandbox) {
    sandbox.hide()
}

if (window.localStorage.hideOutput) {
    document.body.classList.add('hide-output')
}

async function render(s) {
    window.localStorage.input = s

    s = s
        .replace(/`/g, '\\`')
        .replace(/\${/g, '\\${')
        .replace(/\\n/g, '\\\\n')

    s = s.split('\n').map((line, lineno) => {
        return line.replace(/console\.log\(/g, () => {
            return `console.log(${lineno}, `
        })
    }).join('\n')

    output.setValue(s)
}

let renderTimeout = null

editor.on('change', event => {
    const str = editor.getValue()
    clearTimeout(renderTimeout)
    renderTimeout = setTimeout(() => render(str), 0)
})

//
// Window events
//

window.events.on('matchinglines', () => {
    if (window.localStorage.matchingLines) {
        delete window.localStorage.matchingLines
    } else {
        window.localStorage.matchingLines = true
    }
    render(editor.getValue())
})

window.events.on('output:toggle', () => {
    if (window.localStorage.hideOutput) {
        document.body.classList.remove('hide-output')
        delete window.localStorage.hideOutput
    } else {
        document.body.classList.add('hide-output')
        window.localStorage.hideOutput = true
    }
})

window.events.on('sandbox:ontop', () => {
    if (window.localStorage.sandboxOnTop) {
        sandbox.setAlwaysOnTop(false)
        delete window.localStorage.sandboxOnTop
    } else {
        window.localStorage.sandboxOnTop = true
        sandbox.setAlwaysOnTop(true)
    }
})

window.events.on('sandbox:toggle', () => {
    if (window.localStorage.sandbox) {
        sandbox.hide()
        delete window.localStorage.sandbox
    } else {
        sandbox.show()
        window.localStorage.sandbox = true
    }
})

window.events.on('editor:theme', name => {
    name = name.toLowerCase()
    document.body.setAttribute('data-theme', name)
    editor.setOption('theme', name)
    output.setOption('theme', name)
})

window.events.on('editor:linenumbers', () => {
    const state = opts.lineNumbers = !opts.lineNumbers
    window.localStorage.lineNumbers = state
    editor.setOption('lineNumbers', state)
    output.setOption('lineNumbers', state)
})